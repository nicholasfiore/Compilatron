/* too big to actually generate code, but works well enough when taking off the 256 byte limit in testing */
{
int a
a = 0
string z
z = "bond"
while (a!=9) {
if (a !=5){
print("bond")
}
{
a=1+a
string b
b = "james bond"
print(b)
}
}
{}
boolean c
c=true
boolean d
int b
b = 7
d = (true == (true == false))
d = (a==b)
d=(1==a)
d=(1!=a)
d=("string"==z)
d=(z!="string")
d=("string"!="string")
if(d==true){
int c
c = 1 + b
if(c==1){
print("ugh")
}
}while("string"==z){
while(d==true){
a=1+b
}
}
}$

{
int a
int b
boolean c
a = 3
b = 3
c = (a == b)
print(c)
}$

/* testing string allocation (identical strings are assigned the same pointer to save memory) */
{
string a
string b
a = "bee"
b = "tee"
print("bee")
string c
c = "see"
}

{
boolean a
a = (1==2)
print(a)
}$

{
int a
a = 3
if(1==2){
print(a)
}
a=5
print(a)
}$

{
int a
a = 1
while (a!=5){
print(a)
a = 1 + a
}
print("done")
}

//ahead are some arnell test cases

/*  basic output of all data type literals: output: true false 0 7 hello   world   end    */
{
print(true)
print(false)
print(0)
print(7)
print("hello")
print(" ")
print("world")
print("")
print("end")
}$

/* Arnell's "code gen hair puller" program */
{
int a
a = 9
int b
b = 4
if (a ==2+3+b){
print("yes")
}
print(b)
print(2+3)
print(2+3+b)
print(a)
}$


/*   Testing complex expressions with literals pt.1 */
{
    /* output: true 3 6*/
print((2 == 2))
print(1+2)
print(0+1+2+3)
}$


/*CG complex expressions pt. 2*/
{
    /* output: false true false*/
    print((2 == 1))
    print((3 != 2))
    print ((0 != 0))
}$


/*Complex expressions pt.3*/
{
    /*output true false)*/
    print ((true == true))
    print ((false != false))
}$

/*Complex expressions pt.4*/
/* true true*/
{
    print(("true" == "true"))
    print(("true" != "false"))
}$


/*  variable declaration with default values and output  */
/* nick's note: I don't use default values in my compiler, but this made me realize that uninitialized values aren't caught in print statements */
{
int a
boolean b
string c
/* this should just error*/
print(a)
print(b)
print(c)
}$
